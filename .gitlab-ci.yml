stages:
  - build
  - build-image
  - deploy

##############################################
build-dev:
  cache:
    policy: push
  stage: build
  script:
    - echo 开始构建Dinky
    - rm -rf build
    - cd dinky-web
    - npm config set registry http://10.2.4.16:8081/repository/group-npm
    - npm install  --legacy-peer-deps
    - npm run build && cd ..
    - mvn -B clean package -Dmaven.test.skip=true -P prod,scala-2.12,flink-single-version,flink-1.18,aliyun,fast
    - echo 构建完成
    - coscli cp build/dinky-release-1.18-1.0.0-rc4.tar.gz cos://flink-checkpoint-1251517753/data/lib/dinky/dinky-release-1.18-1.0.0-rc4.tar.gz
  tags:
    - dinky
  only:
    - development


build-dev-image:
  stage: build-image
  script:
    - echo 下载安装包
    - mkdir deploy && cd deploy && coscli cp cos://flink-checkpoint-1251517753/data/lib/dinky/dinky-release-1.18-1.0.0-rc4.tar.gz ./
    - echo 解压dinky && ls -al
    - tar -zxf dinky-release-1.18-1.0.0-rc4.tar.gz
    - echo 开始下载依赖
    - coscli cp -r  cos://flink-checkpoint-1251517753/data/lib/dinky/libs ./libs
    - cp ../Dockerfile ./ && cp ../deployment.yaml ./
    - echo 打包镜像
    - docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY_ADDRESS}
    - docker build -t ${DOCKER_REGISTRY_ADDRESS}/dinky:v${CI_PIPELINE_ID} .
    - docker push ${DOCKER_REGISTRY_ADDRESS}/dinky:v${CI_PIPELINE_ID}
    - echo 镜像打包完成
  tags:
    - dinky
  only:
    - development

deploy-dev:
  cache: {}
  stage: deploy
  when: manual
  script:
    - echo 部署Dinky
    - envsubst < deployment.yaml > deployment_new.yaml
    - kubectl apply -f deployment_new.yaml
  tags:
    - dinky
  only:
    - development
